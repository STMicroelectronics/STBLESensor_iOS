/*
 * Copyright (c) 2017  STMicroelectronics â€“ All rights reserved
 * The STMicroelectronics corporate logo is a trademark of STMicroelectronics
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this list of conditions
 *   and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice, this list of
 *   conditions and the following disclaimer in the documentation and/or other materials provided
 *   with the distribution.
 *
 * - Neither the name nor trademarks of STMicroelectronics International N.V. nor any other
 *   STMicroelectronics company nor the names of its contributors may be used to endorse or
 *   promote products derived from this software without specific prior written permission.
 *
 * - All of the icons, pictures, logos and other images that are provided with the source code
 *   in a directory whose title begins with st_images may only be used for internal purposes and
 *   shall not be redistributed to any third party or modified in any way.
 *
 * - Any redistributions in binary form shall not include the capability to display any of the
 *   icons, pictures, logos and other images that are provided with the source code in a directory
 *   whose title begins with st_images.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */

import Foundation
import SwiftyJSON
import MQTTClient

/// Class that send all the feature update to the azure cloud encoding the data
/// into a json format
public class BlueMSAzureIotFeatureListener : BlueMSSubSampligFeatureDelegate{
    
    /// topic where publich the data
    private static let MQTT_TOPIC_FORMAT = "devices/%@/messages/events/";
    
    /// format to use for the data format
    private static let DATA_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"

    /// object where pubblish the data
    private let mConneciton:MQTTSession;
    
    /// device that is trasmitting the data
    private let mDeviceId:String;
    
    /// topic where the data are send
    private let mNotificaitonTopic:String;
    
    /// object used to format the data
    private static let sDateFormatter:DateFormatter = {
        let formatter = DateFormatter();
        formatter.dateFormat = BlueMSAzureIotFeatureListener.DATA_FORMAT;
        return formatter;
    }();
    
    public init(conneciton:MQTTSession, deviceId:String, minUpdateInterval:TimeInterval){
        mConneciton = conneciton;
        mDeviceId = deviceId;
        mNotificaitonTopic = String(format:BlueMSAzureIotFeatureListener.MQTT_TOPIC_FORMAT,deviceId);
        super.init(minUpdateInterval: minUpdateInterval)
    }
    
    
    /// Encode the feature data inside a json object
    ///
    /// - Parameters:
    ///   - feature: feature that generate the data
    ///   - sample: data generated by the feature
    /// - Returns: json containing the feature data
    private func createJsonSample(feature:BlueSTSDKFeature,
                                  sample:BlueSTSDKFeatureSample) -> JSON {
        var jsonData = JSON();
        jsonData["id"].string = mDeviceId;
        jsonData["ts"].string = BlueMSAzureIotFeatureListener.sDateFormatter
            .string(from: sample.notificaitonTime);
        
        let featureName = feature.name;
        if(sample.data.count == 1){
            jsonData[featureName].number = sample.data[0];
        }else{
            let dataDesc = feature.getFieldsDesc();
            var dataArray = JSON();
            //add all the data items into the json the sintax: valueName:value
            zip(dataDesc,sample.data).forEach({ (desc,value) in
                dataArray[desc.name].number=value
            });
            jsonData[featureName] = dataArray
        }//else
        return jsonData;
    }
    
    public override func featureHasNewUpdate(_ feature: BlueSTSDKFeature, sample: BlueSTSDKFeatureSample) {
        let json = createJsonSample(feature: feature, sample: sample);
        
        let jsonData = try? json.rawData();
        
        if let data = jsonData{
            guard mConneciton.status == .connected else {
                return;
            }
            mConneciton.publishData(data,
                                    onTopic: mNotificaitonTopic,
                                    retain: false,
                                    qos: .atMostOnce);
        }
    }
        
}
